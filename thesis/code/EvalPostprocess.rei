/* EvalPostprocess.rei */

/* Postprocesses the evaluation result. This has two functions:

   - Match the evaluation result generated by evaluation with substitution.
     This means to continue evaluation within expressions for which evaluation
     has not reached (e.g., lambda expression bodies, unmatched case and let
     expression bodies), by looking up bound variables and assigning hole
     environments.
   - Number holes and generate a HoleClosureInfo.t that holds information
     about all unique hole closures in the result.

   The postprocessing steps are partially memoized by environments. (Only
   memoized among hole instances which share the same environment.)

   Algorithmically, this algorithm begins in the evaluated region of the
   evaluation result inside the "evaluation boundary" (pp_eval),
   and continues to the region outside the evaluation boundary (pp_uneval).
   */
let postprocess: DHExp.t => (HoleClosureInfo.t, DHExp.t);
